package com.ttp.evaluation.classification.api.controller;

import com.ttp.evaluation.classification.api.dto.ClassificationRequestDto;
import com.ttp.evaluation.classification.api.dto.ClassificationResponseDto;
import com.ttp.evaluation.classification.service.ClassificationService;
import com.ttp.evaluation.classification.domain.RequestStatus;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * REST API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤
 */
@RestController
@RequestMapping("/api/v1/classifications")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Classifications", description = "API –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–¥–∞–º –¢–ù –í–≠–î")
public class ClassificationController {

    private final ClassificationService classificationService;

    @PostMapping
    @Operation(
            summary = "–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é",
            description = "–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ –∫–æ–¥—É –¢–ù –í–≠–î"
    )
    public ResponseEntity<ClassificationResponseDto> createClassificationRequest(
            @Valid @RequestBody ClassificationRequestDto request,
            @RequestHeader("X-User-Id") Long userId) {

        log.info("üì• Creating classification request for user: {}", userId);

        ClassificationResponseDto response = classificationService.createRequest(request, userId);

        log.info("‚úÖ Classification request created: {}", response.getId());

        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @GetMapping("/{id}")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ ID"
    )
    public ResponseEntity<ClassificationResponseDto> getClassificationRequest(
            @PathVariable Long id) {

        log.info("üì§ Fetching classification request: {}", id);

        ClassificationResponseDto response = classificationService.getRequest(id);

        return ResponseEntity.ok(response);
    }

    @GetMapping("/user/{userId}")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    public ResponseEntity<Page<ClassificationResponseDto>> getUserRequests(
            @PathVariable Long userId,
            @PageableDefault(size = 20) Pageable pageable) {

        log.info("üì§ Fetching classification requests for user: {}", userId);

        Page<ClassificationResponseDto> response = classificationService.getUserRequests(userId, pageable);

        return ResponseEntity.ok(response);
    }

    @GetMapping("/status/{status}")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"
    )
    public ResponseEntity<Page<ClassificationResponseDto>> getRequestsByStatus(
            @PathVariable RequestStatus status,
            @PageableDefault(size = 20) Pageable pageable) {

        log.info("üì§ Fetching classification requests with status: {}", status);

        Page<ClassificationResponseDto> response = classificationService.getRequestsByStatus(status, pageable);

        return ResponseEntity.ok(response);
    }

    @PostMapping("/{id}/approve")
    @Operation(
            summary = "–û–¥–æ–±—Ä–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é",
            description = "–≠–∫—Å–ø–µ—Ä—Ç –æ–¥–æ–±—Ä—è–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞"
    )
    public ResponseEntity<ClassificationResponseDto> approveRequest(
            @PathVariable Long id,
            @RequestHeader("X-User-Id") Long expertId,
            @RequestParam(required = false) String comment) {

        log.info("‚úÖ Approving classification request: {} by expert: {}", id, expertId);

        ClassificationResponseDto response = classificationService.approveRequest(id, expertId, comment);

        return ResponseEntity.ok(response);
    }

    @PostMapping("/{id}/reject")
    @Operation(
            summary = "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é",
            description = "–≠–∫—Å–ø–µ—Ä—Ç –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–∞"
    )
    public ResponseEntity<ClassificationResponseDto> rejectRequest(
            @PathVariable Long id,
            @RequestHeader("X-User-Id") Long expertId,
            @RequestParam String comment) {

        log.info("‚ùå Rejecting classification request: {} by expert: {}", id, expertId);

        ClassificationResponseDto response = classificationService.rejectRequest(id, expertId, comment);

        return ResponseEntity.ok(response);
    }
}