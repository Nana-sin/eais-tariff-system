package com.ttp.evaluation.classification.api.controller;

import com.ttp.evaluation.classification.api.dto.ProductClassificationDto;
import com.ttp.evaluation.classification.service.ProductClassificationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * REST API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º –¢–ù –í–≠–î
 */
@RestController
@RequestMapping("/api/v1/products")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Product Classifications", description = "API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º –¢–ù –í–≠–î")
public class ProductClassificationController {

    private final ProductClassificationService productClassificationService;

    @GetMapping("/code/{tnVedCode}")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ –∫–æ–¥—É",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –∫–æ–¥—É –¢–ù –í–≠–î"
    )
    public ResponseEntity<ProductClassificationDto> getByCode(
            @Parameter(description = "–ö–æ–¥ –¢–ù –í–≠–î (2-10 –∑–Ω–∞–∫–æ–≤)")
            @PathVariable String tnVedCode) {

        log.info("üì§ Fetching product classification by code: {}", tnVedCode);
        ProductClassificationDto classification = productClassificationService.getByCode(tnVedCode);
        return ResponseEntity.ok(classification);
    }

    @GetMapping("/search")
    @Operation(
            summary = "–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –∫–æ–¥–∞",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞"
    )
    public ResponseEntity<List<ProductClassificationDto>> searchByPrefix(
            @Parameter(description = "–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–¥–∞ –¢–ù –í–≠–î")
            @RequestParam String prefix) {

        log.info("üîç Searching product classifications by prefix: {}", prefix);
        List<ProductClassificationDto> classifications = productClassificationService.searchByPrefix(prefix);
        return ResponseEntity.ok(classifications);
    }

    @GetMapping("/search/description")
    @Operation(
            summary = "–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é",
            description = "–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"
    )
    public ResponseEntity<List<ProductClassificationDto>> searchByDescription(
            @Parameter(description = "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            @RequestParam String query) {

        log.info("üîç Searching product classifications by description: {}", query);
        List<ProductClassificationDto> classifications = productClassificationService.searchByDescription(query);
        return ResponseEntity.ok(classifications);
    }

    @GetMapping("/children/{parentCode}")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"
    )
    public ResponseEntity<List<ProductClassificationDto>> getChildren(
            @Parameter(description = "–ö–æ–¥ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            @PathVariable String parentCode) {

        log.info("üì§ Fetching child classifications for parent: {}", parentCode);
        List<ProductClassificationDto> children = productClassificationService.getChildren(parentCode);
        return ResponseEntity.ok(children);
    }

    @GetMapping("/root")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–ª–∞–≤ –¢–ù –í–≠–î (2 –∑–Ω–∞–∫–∞)"
    )
    public ResponseEntity<List<ProductClassificationDto>> getRootClassifications() {

        log.info("üì§ Fetching root classifications");
        List<ProductClassificationDto> roots = productClassificationService.getRootClassifications();
        return ResponseEntity.ok(roots);
    }
}