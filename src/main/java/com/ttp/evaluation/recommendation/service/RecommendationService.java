package com.ttp.evaluation.recommendation.service;

import com.ttp.evaluation.integration.RosstatCapacityData;
import com.ttp.evaluation.integration.RosstatClient;
import com.ttp.evaluation.integration.UncomtradeClient;
import com.ttp.evaluation.integration.WtoSchedulesClient;
import com.ttp.evaluation.recommendation.api.dto.recommendation.RecommendationRequestDto;
import com.ttp.evaluation.recommendation.api.dto.recommendation.RecommendationResponseDto;
import com.ttp.evaluation.recommendation.domain.*;
import com.ttp.evaluation.recommendation.repository.TtpRecommendationRepository;
import com.ttp.evaluation.shared.exceptions.ResourceNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Instant;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * –°–µ—Ä–≤–∏—Å –æ—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Ä –¢–¢–ü
 */
@Service
@RequiredArgsConstructor
@Slf4j
@Transactional
public class RecommendationService {

    // ‚úÖ –í–°–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –í–í–ï–†–•–£
    private final TtpRecommendationRepository recommendationRepository;
    private final UncomtradeClient unComtradeClient;
    private final RosstatClient rosstatClient;
    private final WtoSchedulesClient wtoSchedulesClient;  // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–¨

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ü–µ–Ω–∫–∏ –º–µ—Ä –¢–¢–ü
     */
    public RecommendationResponseDto evaluateMeasures(RecommendationRequestDto request) {
        String requestId = UUID.randomUUID().toString();

        log.info("Starting TTP evaluation for request: {}, TN VED: {}, Product: {}",
                requestId, request.getTnVedCode(), request.getProductName());

        TtpRecommendation recommendation = TtpRecommendation.builder()
                .requestId(requestId)
                .userId(request.getUserId())
                .tnVedCode(request.getTnVedCode())
                .productName(request.getProductName())
                .status(RecommendationStatus.IN_PROGRESS)
                .measures(new ArrayList<>())
                .build();

        recommendation = recommendationRepository.save(recommendation);

        try {
            // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            EvaluationContext context = prepareEvaluationContext(request.getTnVedCode());
            log.info("Evaluation context prepared for TN VED: {}", request.getTnVedCode());

            // 2. –û—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö –º–µ—Ä
            List<MeasureResult> results = evaluateAllMeasures(recommendation, context);
            recommendation.getMeasures().addAll(results);

            // 3. –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏
            double totalScore = calculateTotalScore(results);
            recommendation.setTotalScore(totalScore);

            // 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
            String summary = generateSummary(results, context);
            recommendation.setSummary(summary);

            recommendation.setStatus(RecommendationStatus.COMPLETED);
            recommendation.setCompletedAt(Instant.now());

            recommendation = recommendationRepository.save(recommendation);

            log.info("‚úÖ Completed TTP evaluation for request: {}, Total score: {:.2f}",
                    requestId, totalScore);

            return toDto(recommendation);

        } catch (Exception e) {
            log.error("‚ùå Failed to evaluate TTP measures for request: {}", requestId, e);
            recommendation.setStatus(RecommendationStatus.FAILED);
            recommendation.setSummary("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –º–µ—Ä: " + e.getMessage());
            recommendationRepository.save(recommendation);
            throw new RuntimeException("Failed to evaluate measures", e);
        }
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    private EvaluationContext prepareEvaluationContext(String tnVedCode) {
        log.info("üìä Preparing evaluation context for TN VED: {}", tnVedCode);

        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ–¥–æ–≤
        String hsCode = convertTnVedToHs(tnVedCode);
        String okpd2Code = rosstatClient.mapTnVedToOkpd2(tnVedCode);

        int currentYear = LocalDate.now().getYear() - 1;

        // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö API
        log.info("üåê Fetching data from external sources...");

        // ‚úÖ UN Comtrade data
        double chinaShare = calculateChinaImportShare(hsCode, currentYear);
        double unfriendlyShare = unComtradeClient.calculateUnfriendlyCountriesShare(hsCode, currentYear);
        boolean importStable = calculateImportStability(hsCode, 3);
        var importHistory = unComtradeClient.getRussianImportHistoryAsRecords(hsCode);

        double totalImportShare = chinaShare + unfriendlyShare;

        // ‚úÖ Rosstat data
        double productionDecline = rosstatClient.calculateProductionDecline(okpd2Code, 3);
        RosstatCapacityData capacityData = rosstatClient.getProductionCapacity(okpd2Code, currentYear);
        double capacityUtilization = capacityData != null ?
                capacityData.getCapacityUtilization() / 100.0 : 0.5;

        // ‚úÖ WTO data
        var tariffInfo = wtoSchedulesClient.getTariffInfo(hsCode, "russian-federation");
        boolean hasTariffBinding = "Certified".equals(tariffInfo.status());
        double tariffMargin = wtoSchedulesClient.calculateTariffMargin(hsCode);
        boolean canRaiseTariff = wtoSchedulesClient.isTariffProtectionAvailable(hsCode);

        log.info("üìà Data collected: China={:.1f}%, Unfriendly={:.1f}%, Stable={}, Decline={:.1f}%, Capacity={:.1f}%",
                chinaShare * 100, unfriendlyShare * 100, importStable,
                productionDecline * 100, capacityUtilization * 100);

        log.info("üìä WTO: bound={}, applied={}, margin={:.1f}%, ITA={}, canRaise={}",
                tariffInfo.boundRate(), tariffInfo.appliedRate(), tariffMargin,
                tariffInfo.isITA(), canRaiseTariff);

        return EvaluationContext.builder()
                .hsCode(hsCode)
                .tnVedCode(tnVedCode)
                .okpd2Code(okpd2Code)
                .chinaImportShare(chinaShare)
                .unfriendlyCountriesShare(unfriendlyShare)
                .totalImportShare(totalImportShare)
                .importStable(importStable)
                .productionDecline(productionDecline)
                .capacityUtilization(capacityUtilization)
                .tariffInfo(tariffInfo)
                .hasTariffBinding(hasTariffBinding)
                .tariffMargin(tariffMargin)
                .canRaiseTariff(canRaiseTariff)
                .importHistory(importHistory)
                .build();
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    private double calculateChinaImportShare(String hsCode, Integer year) {
        try {
            var russiaData = unComtradeClient.getTradeData(hsCode, "RUS", year);

            double totalImport = russiaData.stream()
                    .filter(trade -> "M".equals(trade.getFlowCode()))
                    .mapToDouble(trade -> trade.getPrimaryValue() != null ? trade.getPrimaryValue() : 0)
                    .sum();

            double chinaImport = russiaData.stream()
                    .filter(trade -> "M".equals(trade.getFlowCode()))
                    .filter(trade -> isChina(trade.getPartnerISO(), trade.getPartnerCode()))
                    .mapToDouble(trade -> trade.getPrimaryValue() != null ? trade.getPrimaryValue() : 0)
                    .sum();

            if (totalImport == 0) {
                log.warn("No import data found for HS={}, Year={}", hsCode, year);
                return 0.0;
            }

            double share = chinaImport / totalImport;
            log.info("China import share for HS {}: {:.2f}%", hsCode, share * 100);
            return share;

        } catch (Exception e) {
            log.error("Error calculating China import share: {}", e.getMessage());
            return 0.0;
        }
    }

    private boolean isChina(String partnerISO, Integer partnerCode) {
        if (partnerISO != null && (partnerISO.equalsIgnoreCase("CN") || partnerISO.equalsIgnoreCase("CHN"))) {
            return true;
        }
        return Integer.valueOf(156).equals(partnerCode);
    }

    private boolean calculateImportStability(String hsCode, int years) {
        try {
            var history = unComtradeClient.getRussianImportHistory(hsCode, years);

            if (history.size() < 2) {
                log.warn("Insufficient data for stability check: {} years", history.size());
                return false;
            }

            for (int i = 1; i < history.size(); i++) {
                double prevYear = history.get(i - 1).importValue();
                double currentYear = history.get(i).importValue();

                if (prevYear > 0) {
                    double change = ((currentYear - prevYear) / prevYear) * 100;
                    if (change < -20) {
                        log.info("Import instability detected: {:.1f}% drop from year {} to {}",
                                Math.abs(change), history.get(i - 1).year(), history.get(i).year());
                        return false;
                    }
                }
            }

            log.info("Import is stable for the last {} years", years);
            return true;

        } catch (Exception e) {
            log.error("Error calculating import stability: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ –≤—Å–µ—Ö 6 –º–µ—Ä –¢–¢–ü
     */
    private List<MeasureResult> evaluateAllMeasures(TtpRecommendation recommendation,
                                                    EvaluationContext context) {
        log.info("‚öñÔ∏è Evaluating all 6 TTP measures...");

        List<MeasureResult> results = new ArrayList<>();

        results.add(evaluateMeasure1_WtoLevel(recommendation, context));
        results.add(evaluateMeasure2_Tariff35_50(recommendation, context));
        results.add(evaluateMeasure3_AntiDumpingChina(recommendation, context));
        results.add(evaluateMeasure4_EaeuRegulations(recommendation, context));
        results.add(evaluateMeasure5_ProductionMonitoring(recommendation, context));
        results.add(evaluateMeasure6_OtherMeasures(recommendation, context));

        long applicableCount = results.stream().filter(MeasureResult::getApplicable).count();
        log.info("‚úÖ Evaluation complete: {}/6 measures applicable", applicableCount);

        return results;
    }

    /**
     * –ú–ï–†–ê 1: –ú–µ—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –í–¢–û (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä–∞–º–∫–∞—Ö —Å–≤—è–∑—ã–≤–∞–Ω–∏—è)
     *
     * –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏:
     * 1. –ù–∞–ª–∏—á–∏–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –≤ –í–¢–û
     * 2. –î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ > 30%
     * 3. –ù–µ–¥–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π
     */
    private MeasureResult evaluateMeasure1_WtoLevel(TtpRecommendation recommendation,
                                                    EvaluationContext context) {
        log.debug("Evaluating Measure 1: WTO Level");

        boolean tariffBinding = context.getHasTariffBinding();
        boolean highImport = context.getTotalImportShare() > 0.30;
        boolean hasCapacity = context.getCapacityUtilization() < 0.70;

        boolean applicable = tariffBinding && highImport;

        double score = 0.0;
        if (applicable) {
            score = 50.0;
            if (context.getTotalImportShare() > 0.50) score += 20;
            if (hasCapacity) score += 15;
            if (context.getProductionDecline() > 0.10) score += 15;
            score = Math.min(100, score);
        }

        String reasoning = String.format(
                "–°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞: %s | –î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞: %.1f%% | –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ—â–Ω–æ—Å—Ç–µ–π: %.1f%% | " +
                        "–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: %.1f%% ‚Üí –°–≤—è–∑–∞–Ω–Ω—ã–π: %.1f%%",
                tariffBinding ? "‚úì –î–ê" : "‚úó –ù–ï–¢",
                context.getTotalImportShare() * 100,
                context.getCapacityUtilization() * 100,
                context.getTariffInfo() != null ? context.getTariffInfo().appliedRate() : 0,
                context.getTariffInfo() != null ? context.getTariffInfo().boundRate() : 0
        );

        String details = String.format("""
                === –ú–ï–†–ê 1: –ú–µ—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –í–¢–û ===
                
                –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: %s
                –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %.1f/100
                
                –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
                1. –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–≤–∫—É –¥–æ —É—Ä–æ–≤–Ω—è %.1f%%
                2. –í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ (%.1f%%) —Å–æ–∑–¥–∞–µ—Ç —Ä–∏—Å–∫–∏ –¥–ª—è –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
                3. %s
                4. –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: %.1f%%
                
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
                %s
                """,
                applicable ? "‚úì –î–ê" : "‚úó –ù–ï–¢",
                score,
                context.getTariffInfo() != null ? context.getTariffInfo().boundRate() : 0,
                context.getTotalImportShare() * 100,
                hasCapacity ? "‚úì –ò–º–µ—é—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–º–µ—â–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞" :
                        "‚ö† –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ç—Ä–µ–±—É—é—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
                context.getProductionDecline() * 100,
                applicable ? "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä–∞–º–∫–∞—Ö —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –í–¢–û" :
                        "–ú–µ—Ä–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∏–∑–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"
        );

        return MeasureResult.builder()
                .recommendation(recommendation)
                .measureType(MeasureType.WTO_LEVEL)
                .measureName("–ú–µ—Ä—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –í–¢–û (–ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞)")
                .applicable(applicable)
                .score(score)
                .reasoning(reasoning)
                .details(details)
                .importShare(context.getTotalImportShare())
                .productionCapacity(context.getCapacityUtilization())
                .build();
    }

    /**
     * –ú–ï–†–ê 2: –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –¥–æ 35-50%
     *
     * –ö—Ä–∏—Ç–µ—Ä–∏–∏:
     * 1. –î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ > 30%
     * 2. –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∞ (–Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
     */
    private MeasureResult evaluateMeasure2_Tariff35_50(TtpRecommendation recommendation,
                                                       EvaluationContext context) {
        log.debug("Evaluating Measure 2: Tariff 35-50%");

        boolean highImport = context.getTotalImportShare() > 0.30;
        boolean stableImport = context.isImportStable();

        boolean applicable = highImport && stableImport;

        double score = 0.0;
        if (applicable) {
            score = 55.0;
            if (context.getTotalImportShare() > 0.50) score += 25;
            if (context.getProductionDecline() > 0.15) score += 20;
            score = Math.min(100, score);
        }

        String reasoning = String.format(
                "–î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞: %.1f%% | –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: %s | –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: %.1f%%",
                context.getTotalImportShare() * 100,
                stableImport ? "‚úì –°–¢–ê–ë–ò–õ–¨–ù–´–ô" : "‚úó –ù–ï–°–¢–ê–ë–ò–õ–¨–ù–´–ô",
                context.getProductionDecline() * 100
        );

        String details = String.format("""
                === –ú–ï–†–ê 2: –ü–æ–≤—ã—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –¥–æ 35-50%% ===
                
                –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: %s
                –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %.1f/100
                
                –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
                1. %s
                2. –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ —Å–æ–∑–¥–∞—Å—Ç —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
                3. %s
                
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
                %s
                """,
                applicable ? "‚úì –î–ê" : "‚úó –ù–ï–¢",
                score,
                stableImport ? "‚úì –°—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏" :
                        "‚ö† –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
                context.getProductionDecline() > 0.10 ?
                        "‚ö† –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç—Ä–µ–±—É–µ—Ç –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ä" :
                        "‚úì –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ",
                applicable ? "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ 35-50%" :
                        "–ú–µ—Ä–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"
        );

        return MeasureResult.builder()
                .recommendation(recommendation)
                .measureType(MeasureType.TARIFF_35_50)
                .measureName("–ü–æ–≤—ã—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –¥–æ 35-50%")
                .applicable(applicable)
                .score(score)
                .reasoning(reasoning)
                .details(details)
                .importShare(context.getTotalImportShare())
                .build();
    }

    /**
     * –ú–ï–†–ê 3: –ê–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –ö–∏—Ç–∞—è
     *
     * –ö—Ä–∏—Ç–µ—Ä–∏–∏:
     * 1. –î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ö–∏—Ç–∞—è > 20%
     * 2. –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤ –†–§ > 5%
     * 3. –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –¥–µ–º–ø–∏–Ω–≥ (—Ü–µ–Ω–æ–≤—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏)
     */
    private MeasureResult evaluateMeasure3_AntiDumpingChina(TtpRecommendation recommendation,
                                                            EvaluationContext context) {
        log.debug("Evaluating Measure 3: Anti-dumping China");

        double chinaShare = context.getChinaImportShare();
        boolean highChinaImport = chinaShare > 0.20;
        boolean productionDecline = context.getProductionDecline() > 0.05;

        // TODO: ML-–º–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–º–ø–∏–Ω–≥–∞
        boolean suspectedDumping = highChinaImport && productionDecline;

        boolean applicable = highChinaImport && productionDecline;

        double score = 0.0;
        if (applicable) {
            score = 60.0;
            if (chinaShare > 0.40) score += 20;
            if (context.getProductionDecline() > 0.20) score += 20;
            score = Math.min(100, score);
        }

        String reasoning = String.format(
                "–î–æ–ª—è –ö–ù–†: %.1f%% | –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –†–§: %.1f%% | –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –¥–µ–º–ø–∏–Ω–≥: %s",
                chinaShare * 100,
                context.getProductionDecline() * 100,
                suspectedDumping ? "‚úì –î–ê" : "‚úó –ù–ï–¢"
        );

        String details = String.format("""
                === –ú–ï–†–ê 3: –ê–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (–ö–∏—Ç–∞–π) ===
                
                –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: %s
                –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %.1f/100
                
                –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
                1. %s
                2. %s
                3. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ —É—Å–ª–æ–≤–∏–π —Ç–æ—Ä–≥–æ–≤–ª–∏
                4. ‚è± –ê–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 12-18 –º–µ—Å—è—Ü–µ–≤
                
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
                %s
                """,
                applicable ? "‚úì –î–ê" : "‚úó –ù–ï–¢",
                score,
                highChinaImport ? "‚ö† –í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–π –¥–µ–º–ø–∏–Ω–≥" :
                        "‚úì –î–æ–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã",
                productionDecline ? "‚ö† –°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è" :
                        "‚úì –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ",
                applicable ? "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è" :
                        "–ú–µ—Ä–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π –¥–æ–ª–∏ –ö–∏—Ç–∞—è –∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
        );

        return MeasureResult.builder()
                .recommendation(recommendation)
                .measureType(MeasureType.ANTI_DUMPING_CHINA)
                .measureName("–ê–Ω—Ç–∏–¥–µ–º–ø–∏–Ω–≥–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (–ö–∏—Ç–∞–π)")
                .applicable(applicable)
                .score(score)
                .reasoning(reasoning)
                .details(details)
                .priceDifference(suspectedDumping ? -0.15 : 0.0)
                .build();
    }

    /**
     * –ú–ï–†–ê 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –ï–ê–≠–°
     */
    private MeasureResult evaluateMeasure4_EaeuRegulations(TtpRecommendation recommendation,
                                                           EvaluationContext context) {
        log.debug("Evaluating Measure 4: EAEU Regulations");

        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –ï–ê–≠–°
        boolean hasRegulation = checkEaeuRegulation(context.getTnVedCode());

        boolean applicable = hasRegulation;
        double score = applicable ? 75.0 : 0.0;

        String reasoning = hasRegulation ?
                "‚úì –ü—Ä–∏–º–µ–Ω–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –ï–ê–≠–°" :
                "‚úó –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –ï–ê–≠–° –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º—ã";

        String details = String.format("""
                === –ú–ï–†–ê 4: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –ï–ê–≠–° ===
                
                –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: %s
                –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %.1f/100
                
                –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
                1. %s
                2. ‚úì –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –í–¢–û
                3. ‚è± –°—Ä–æ–∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞: 6-12 –º–µ—Å—è—Ü–µ–≤
                
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
                %s
                """,
                applicable ? "‚úì –î–ê" : "‚úó –ù–ï–¢",
                score,
                hasRegulation ? "‚úì –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∞" :
                        "‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞",
                applicable ? "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤ –ï–ê–≠–°" :
                        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞"
        );

        return MeasureResult.builder()
                .recommendation(recommendation)
                .measureType(MeasureType.EAEU_REGULATION)
                .measureName("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –ï–ê–≠–°")
                .applicable(applicable)
                .score(score)
                .reasoning(reasoning)
                .details(details)
                .build();
    }

    /**
     * –ú–ï–†–ê 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞
     * (–í—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω–∏–º–∞)
     */
    private MeasureResult evaluateMeasure5_ProductionMonitoring(TtpRecommendation recommendation,
                                                                EvaluationContext context) {
        log.debug("Evaluating Measure 5: Production Monitoring");

        boolean applicable = true;
        double score = 65.0;

        String reasoning = String.format(
                "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ—â–Ω–æ—Å—Ç–µ–π: %.1f%% | –î–∏–Ω–∞–º–∏–∫–∞: %s | –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å: –í–´–°–û–ö–ê–Ø",
                context.getCapacityUtilization() * 100,
                context.getProductionDecline() > 0 ? "‚ö† –°–ù–ò–ñ–ï–ù–ò–ï" : "‚úì –†–û–°–¢/–°–¢–ê–ë–ò–õ–¨–ù–û"
        );

        String details = String.format("""
                === –ú–ï–†–ê 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ ===
                
                –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: ‚úì –î–ê (–≤—Å–µ–≥–¥–∞)
                –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %.1f/100
                
                –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
                1. ‚úì –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã—è–≤–ª—è—Ç—å —É–≥—Ä–æ–∑—ã
                2. üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –µ–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∏ –∏–º–ø–æ—Ä—Ç–µ
                3. %s
                4. ‚è± –°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:
                –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Ç—Ä–∞—Å–ª–∏
                """,
                score,
                context.getProductionDecline() > 0.10 ?
                        "‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å–∏–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∏–∑-–∑–∞ —Å–Ω–∏–∂–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞" :
                        "‚úì –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
        );

        return MeasureResult.builder()
                .recommendation(recommendation)
                .measureType(MeasureType.PRODUCTION_MONITORING)
                .measureName("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞")
                .applicable(applicable)
                .score(score)
                .reasoning(reasoning)
                .details(details)
                .productionCapacity(context.getCapacityUtilization())
                .build();
    }

    /**
     * –ú–ï–†–ê 6: –ü—Ä–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã
     */
    private MeasureResult evaluateMeasure6_OtherMeasures(TtpRecommendation recommendation,
                                                         EvaluationContext context) {
        log.debug("Evaluating Measure 6: Other Measures");

        boolean applicable = false;
        double score = 0.0;
        StringBuilder reasoning = new StringBuilder("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ");
        List<String> recommendations = new ArrayList<>();

        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        if (context.getProductionDecline() > 0.25) {
            applicable = true;
            score = 70.0;
            reasoning.append("‚ö† –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. ");
            recommendations.add("–†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã");
        }

        // –¢–∞—Ä–∏—Ñ–Ω—ã–µ –∫–≤–æ—Ç—ã
        if (context.getTariffInfo() != null &&
                Boolean.TRUE.equals(context.getTariffInfo().hasTariffQuota())) {  // ‚úÖ –†–ê–ë–û–¢–ê–ï–¢
            applicable = true;
            score = Math.max(score, 65.0);
            reasoning.append("‚úì –ü—Ä–∏–º–µ–Ω–∏–º–∞ —Ç–∞—Ä–∏—Ñ–Ω–∞—è –∫–≤–æ—Ç–∞. ");
            recommendations.add("–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –æ–±—ä–µ–º–æ–≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–π –∫–≤–æ—Ç—ã");
        }

        if (!applicable) {
            reasoning.append("‚úì –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è");
            recommendations.add("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Ç—É–∞—Ü–∏–∏");
        }

        String details = String.format("""
                === –ú–ï–†–ê 6: –ü—Ä–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã ===
                
                –ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å: %s
                –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %.1f/100
                
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
                %s
                """,
                applicable ? "‚úì –î–ê" : "‚úó –ù–ï–¢",
                score,
                String.join("\n", recommendations.stream()
                        .map(r -> "‚Ä¢ " + r)
                        .toList())
        );

        return MeasureResult.builder()
                .recommendation(recommendation)
                .measureType(MeasureType.OTHER)
                .measureName("–ü—Ä–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã")
                .applicable(applicable)
                .score(score)
                .reasoning(reasoning.toString())
                .details(details)
                .build();
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private String convertTnVedToHs(String tnVedCode) {
        if (tnVedCode != null && tnVedCode.length() >= 6) {
            return tnVedCode.substring(0, 6);
        }
        return tnVedCode;
    }

    private boolean checkEaeuRegulation(String tnVedCode) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–∏—â–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (01-24) —á–∞—Å—Ç–æ –∏–º–µ—é—Ç —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã
        if (tnVedCode != null && tnVedCode.length() >= 2) {
            try {
                int chapter = Integer.parseInt(tnVedCode.substring(0, 2));
                return chapter >= 1 && chapter <= 24;
            } catch (NumberFormatException e) {
                return false;
            }
        }
        return false;
    }

    private double calculateTotalScore(List<MeasureResult> results) {
        return results.stream()
                .filter(MeasureResult::getApplicable)
                .mapToDouble(MeasureResult::getScore)
                .average()
                .orElse(0.0);
    }

    private String generateSummary(List<MeasureResult> results, EvaluationContext context) {
        long applicableCount = results.stream().filter(MeasureResult::getApplicable).count();

        MeasureResult topMeasure = results.stream()
                .filter(MeasureResult::getApplicable)
                .max((m1, m2) -> Double.compare(m1.getScore(), m2.getScore()))
                .orElse(null);

        StringBuilder summary = new StringBuilder();
        summary.append(String.format("üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–∏–º–µ–Ω–∏–º–æ –º–µ—Ä: %d –∏–∑ %d.\n\n",
                applicableCount, results.size()));

        if (topMeasure != null) {
            summary.append(String.format("‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø: %s (–æ—Ü–µ–Ω–∫–∞: %.1f)\n\n",
                    topMeasure.getMeasureName(), topMeasure.getScore()));
            summary.append("–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ").append(topMeasure.getReasoning()).append("\n\n");
        } else {
            summary.append("‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω–∏–º—ã—Ö –º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.\n\n");
        }

        summary.append("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n");
        summary.append(String.format("‚Ä¢ –î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –ö–∏—Ç–∞—è: %.1f%%\n",
                context.getChinaImportShare() * 100));
        summary.append(String.format("‚Ä¢ –î–æ–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –Ω–µ–¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω: %.1f%%\n",
                context.getUnfriendlyCountriesShare() * 100));
        summary.append(String.format("‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π: %.1f%%\n",
                context.getCapacityUtilization() * 100));
        summary.append(String.format("‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: %.1f%%\n",
                context.getProductionDecline() * 100));

        return summary.toString();
    }

    @Transactional(readOnly = true)
    public RecommendationResponseDto getRecommendation(String requestId) {
        TtpRecommendation recommendation = recommendationRepository.findByRequestId(requestId)
                .orElseThrow(() -> new ResourceNotFoundException("Recommendation not found: " + requestId));
        return toDto(recommendation);
    }

    private RecommendationResponseDto toDto(TtpRecommendation recommendation) {
        return RecommendationResponseDto.builder()
                .requestId(recommendation.getRequestId())
                .tnVedCode(recommendation.getTnVedCode())
                .productName(recommendation.getProductName())
                .status(recommendation.getStatus())
                .totalScore(recommendation.getTotalScore())
                .summary(recommendation.getSummary())
                .measures(recommendation.getMeasures())
                .createdAt(recommendation.getCreatedAt())
                .completedAt(recommendation.getCompletedAt())
                .build();
    }
}