package com.ttp.evaluation.recommendation.api.controller;

import com.ttp.evaluation.recommendation.api.dto.recommendation.RecommendationRequestDto;
import com.ttp.evaluation.recommendation.api.dto.recommendation.RecommendationResponseDto;
import com.ttp.evaluation.recommendation.domain.RecommendationStatus;
import com.ttp.evaluation.recommendation.service.RecommendationService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**
 * REST API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –º–µ—Ä –¢–¢–ü
 */
@RestController
@RequestMapping("/api/v1/recommendations")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "Recommendations", description = "API –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–µ—Ä –¢–¢–ü")
public class RecommendationController {

    private final RecommendationService recommendationService;

    @PostMapping
    @Operation(
            summary = "–°–æ–∑–¥–∞—Ç—å –æ—Ü–µ–Ω–∫—É –º–µ—Ä –¢–¢–ü",
            description = "–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Ä –¢–¢–ü –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "201",
                    description = "–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞",
                    content = @Content(schema = @Schema(implementation = RecommendationResponseDto.class))
            ),
            @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"),
            @ApiResponse(responseCode = "500", description = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    })
    public ResponseEntity<RecommendationResponseDto> createRecommendation(
            @Valid @RequestBody RecommendationRequestDto request) {

        log.info("üì• Received recommendation request for TN VED: {}, User: {}",
                request.getTnVedCode(), request.getUserId());

        RecommendationResponseDto response = recommendationService.evaluateMeasures(request);

        log.info("‚úÖ Recommendation created successfully: {}", response.getRequestId());

        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @GetMapping("/{requestId}")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –ø–æ ID",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –º–µ—Ä –¢–¢–ü –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–∞"
    )
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "–û—Ü–µ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞",
                    content = @Content(schema = @Schema(implementation = RecommendationResponseDto.class))
            ),
            @ApiResponse(responseCode = "404", description = "–û—Ü–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    })
    public ResponseEntity<RecommendationResponseDto> getRecommendation(
            @Parameter(description = "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ (UUID)")
            @PathVariable String requestId) {

        log.info("üì§ Fetching recommendation: {}", requestId);

        RecommendationResponseDto response = recommendationService.getRecommendation(requestId);

        return ResponseEntity.ok(response);
    }

    @GetMapping("/user/{userId}")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫ –º–µ—Ä –¢–¢–ü –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    public ResponseEntity<Page<RecommendationResponseDto>> getUserRecommendations(
            @Parameter(description = "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            @PathVariable Long userId,
            @PageableDefault(size = 20) Pageable pageable) {

        log.info("üì§ Fetching recommendations for user: {}", userId);

        // TODO: Implement in service
        return ResponseEntity.ok(Page.empty());
    }

    @GetMapping("/status/{status}")
    @Operation(
            summary = "–ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É",
            description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ü–µ–Ω–æ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"
    )
    public ResponseEntity<Page<RecommendationResponseDto>> getRecommendationsByStatus(
            @Parameter(description = "–°—Ç–∞—Ç—É—Å –æ—Ü–µ–Ω–∫–∏")
            @PathVariable RecommendationStatus status,
            @PageableDefault(size = 20) Pageable pageable) {

        log.info("üì§ Fetching recommendations with status: {}", status);

        // TODO: Implement in service
        return ResponseEntity.ok(Page.empty());
    }
}