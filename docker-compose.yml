version: '3.8'

services:
  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: ttp-postgres
    environment:
      POSTGRES_DB: ttp_operational
      POSTGRES_USER: ttp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ttp_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ttp-network

  # ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:23.12-alpine
    container_name: ttp-clickhouse
    environment:
      CLICKHOUSE_DB: ttp_analytics
      CLICKHOUSE_USER: ttp_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./init-clickhouse.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ttp-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ttp-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ttp-network

  # Zookeeper (БЕЗ healthcheck)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: ttp-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ttp-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ttp-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - ttp-network

  # Kafka Init - создание топиков автоматически
  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ttp-kafka-init
    depends_on:
      - kafka
    restart: on-failure
    entrypoint: /bin/sh
    command: >
      -c "
      echo '⏳ Waiting 30 seconds for Kafka...';
      sleep 30;
      echo '📝 Creating Kafka topics...';
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic classification-requests --partitions 3 --replication-factor 1 2>/dev/null || true;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic ttp-evaluation-tasks --partitions 3 --replication-factor 1 2>/dev/null || true;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic notifications --partitions 3 --replication-factor 1 2>/dev/null || true;
      echo '✅ Kafka topics created!';
      kafka-topics --bootstrap-server kafka:9092 --list;
      "
    networks:
      - ttp-network

  # ClickHouse Init - создание таблиц автоматически
  clickhouse-init:
    image: clickhouse/clickhouse-server:23.12-alpine
    container_name: ttp-clickhouse-init
    depends_on:
      - clickhouse
    restart: on-failure
    volumes:
      - ./init-clickhouse.sql:/init.sql:ro
    entrypoint: /bin/sh
    command: >
      -c "
      echo '⏳ Waiting 20 seconds for ClickHouse...';
      sleep 20;
      echo '📝 Creating ClickHouse tables...';
      clickhouse-client --host clickhouse --port 9000 --user ttp_user --password clickhouse --multiquery < /init.sql || true;
      echo '✅ ClickHouse tables created!';
      clickhouse-client --host clickhouse --port 9000 --user ttp_user --password clickhouse --query 'SHOW TABLES FROM ttp_analytics' || true;
      "
    networks:
      - ttp-network

  # Application
  ttp-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ttp-application
    depends_on:
      - postgres
      - redis
      - kafka
      - clickhouse
      - kafka-init
      - clickhouse-init
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ttp_operational
      POSTGRES_USER: ttp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DB: ttp_analytics
      CLICKHOUSE_USER: ttp_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-clickhouse}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-my-secret-key-for-local-development-only-2025}
      TRADEMAP_API_KEY: ${TRADEMAP_API_KEY:-dummy-key}
      UNCOMTRADE_API_KEY: ${UNCOMTRADE_API_KEY:-dummy-key}
      ROSSTAT_API_KEY: ${ROSSTAT_API_KEY:-dummy-key}
      WTO_API_KEY: ${WTO_API_KEY:-dummy-key}
    networks:
      - ttp-network
    restart: unless-stopped

volumes:
  postgres-data:
  clickhouse-data:
  redis-data:

networks:
  ttp-network:
    driver: bridge
